---
name: Build and Push Image to AZURE ACR

run-name: "Build and SCAN DOTNET"

on:
#   push:
#     branches: [ main ]
  workflow_dispatch: {}
jobs:

  extract-version:
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Get version from changelog
        id: get_version
        run: |
          VERSION=$(grep -m1 -oP '(?<=## \[)[0-9]+\.[0-9]+\.[0-9]+' CHANGELOG.md)
          echo "Version found: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  build-and-scan:
    name: Build and Push to ACR
    runs-on: ubuntu-latest
    needs: extract-version
    steps:
      - name: Print version from previous job
        run: |
          echo "Version is: ${{ needs.extract-version.outputs.app_version }}"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Necesario para Sonar

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Run Tests with Coverage
        run: dotnet test MyMinimalApi.Tests/MyMinimalApi.Tests.csproj --no-build --configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=./TestResults/coverage.opencover.xml


      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.login=${{ secrets.SONAR }}

      - name: SonarCloud Quality Gate
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.login=${{ secrets.SONAR}}
            -Dsonar.qualitygate.wait=true
